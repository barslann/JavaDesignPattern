Single Responsibility Principle
    It is a variation of the widely used concept of COHESION.
    The idea is simple. If each class has a single responsibility, it will be easier to maintain

    Cohesion -> Degree to which the elements inside a module belong together

    A class should gave only one reason to change.

    A case that violates this pricinplen would be a method that contains business logic with presentation logic.


Open/Closed Principle
    Question we should ask yourself -> is our design ready to be easily extended?

    Software entities(classes, module, functions, etc) should be open for extension but closed for modification.
        meaning that our system must be extensible but this extension must be done without modifying the existing code.

Liskov Substitution Principle

Interface Segregation Principle
    The idea is to avoid forcing clients to deal with methods not of interest to them
    Clients should not be forced to depend on methods they do not use

    The client should always depend on abstractions

    ISP is a tool to obtain high cohesion that our clients use

